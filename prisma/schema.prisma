datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          UserRole  @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Store {
  id        String      @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  billboard Billboard[] @relation("StoreToBillboard")
  category  Category[]  @relation("StoreToCategory")
  size      Size[]      @relation("StoreToSize")
  material  Material[]  @relation("StoreToMaterial")
  product   Product[]   @relation("StoreToProduct")
  Order     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([storeId])
  @@index([productId])
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("CategoryToProduct")
  sizes     Size[]    @relation("CategoryToSize")

  @@index([storeId])
}

model Size {
  id         String    @id @default(uuid())
  storeId    String
  store      Store     @relation("StoreToSize", fields: [storeId], references: [id])
  value      Decimal
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Product    Product[]
  category   Category  @relation("CategoryToSize", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  @@index([storeId])
  @@index([categoryId])
}

model Material {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToMaterial", fields: [storeId], references: [id])
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  prooducts Product[]

  @@index([storeId])
}

model Product {
  id             String          @id @default(uuid())
  storeId        String
  store          Store           @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId     String
  category       Category        @relation("CategoryToProduct", fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  billboard      Billboard?
  name           String
  price          Decimal
  weight         Decimal
  description    String
  onSale         Boolean         @default(false)
  sale           Decimal         @default(0)
  isArchived     Boolean         @default(false)
  inStock        Boolean         @default(true)
  sizeId         String
  size           Size            @relation(fields: [sizeId], references: [id])
  materialId     String
  material       Material        @relation(fields: [materialId], references: [id])
  images         Image[]
  orderItems     OrderItem[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  productReviews ProductReview[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([materialId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @default(uuid())
  orderId   String  @unique
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ProductReview {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  text      String
  name      String
  rating    Decimal
  createdAt DateTime @default(now())

  @@index([productId])
}